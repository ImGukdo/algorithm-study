# https://programmers.co.kr/learn/courses/30/lessons/42840
# 프로그래머스 모의고사 문제
# 수포자는 수학을 포기한 사람의 준말입니다. 
# 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 
# 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.
# 1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
# 2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
# 3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...
# 1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 
# 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

def solution(answers):
    answer = []
    lst_a = [1, 2, 3, 4, 5]  # 1번 수포자의 정답 패턴 저장
    lst_b = [2, 1, 2, 3, 2, 4, 2, 5]  # 2번 수포자의 정답 패턴 저장
    lst_c = [3, 3, 1, 1, 2, 2, 4, 4, 5, 5]  # 3번 수포자의 정답 패턴 저장
    lst_count = [0, 0, 0]  # 각각 수포자의 맞은 정답 갯수를 저장 
    for idx, i in enumerate(answers) :  # 정답을 탐색하면서
        if lst_a[idx % 5] == i :  # 1번 수포자의 정답과 비교 체크
            lst_count[0] += 1  # 정답이면 정답갯수 증가
        if lst_b[idx % 8] == i :  # 2번 수포자의 정답과 비교 체크
            lst_count[1] += 1  # 정답이면 정답갯수 증가
        if lst_c[idx % 10] == i :  # 3번 수포자의 정답과 비교 체크
            lst_count[2] += 1  # 정답이면 정답갯수 증가
            
    iMax = max(lst_count)  # 3명의 정답갯수중 가장 큰값
    for idx, i in enumerate(lst_count) :  # 가장 많이 맞은 갯수와 비교하여
        if i == iMax :  # 가장 많이 맞은 갯수와 같으면 
            answer.append(idx + 1)  # 몇번 수포자인지 저장
            
    return answer