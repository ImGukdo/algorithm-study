// https://programmers.co.kr/learn/courses/30/lessons/60058
// 프로그래머스 괄호 변환 문제
// '(' 와 ')' 로만 이루어진 문자열이 있을 경우, 
// '(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.
// 그리고 여기에 '('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.
// 예를 들어, "(()))("와 같은 문자열은 "균형잡힌 괄호 문자열" 이지만 "올바른 괄호 문자열"은 아닙니다.
// 반면에 "(())()"와 같은 문자열은 "균형잡힌 괄호 문자열" 이면서 동시에 "올바른 괄호 문자열" 입니다.
// '(' 와 ')' 로만 이루어진 문자열 w가 "균형잡힌 괄호 문자열" 이라면 
// 다음과 같은 과정을 통해 "올바른 괄호 문자열"로 변환할 수 있습니다. 
// 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
// 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 
// 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
// 3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
// 3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
// 4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
// 4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
// 4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
// 4-3. ')'를 다시 붙입니다. 
// 4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
// 4-5. 생성된 문자열을 반환합니다.

#include <string>
#include <vector>

using namespace std;

string Count(string s){  // 올바른 괄호인지 판단하고 아니라면 괄호 방향을 뒤집는 함수 
    int iCount = 0;
    bool flag = true; // 올바른 괄호인지 아닌지 판별하는 변수 
    for(int i = 0; i < s.length(); ++i){  // 문자열을 탐색 
        if(s[i] == '(')  // ( 여는 괄호이면 iCount - 1 
            --iCount;
        if(s[i] == ')')  // ) 닫는 괄호이면 iCount + 1 
            ++iCount;
        
        if(iCount > 0){  // iCount가 0보다 크면 
           flag = false;  // 올바른 관호가 아니므로 
            break;  // 탈출 
        }
    }
    string a = "";  // 괄호를 뒤집은 문자열을 저장할 변수 
    if(!flag){  // 올바른 괄호가 아니면 
        for(int i = 1; i < s.length() - 1; ++i){  // 문자열의 처음과 끝을 제외하고 탐색하면서 
            if(s[i] == '(')  // 괄호를 뒤집어서 저장 
                a += ')';
            else if(s[i] == ')')
                a += '(';
        }
    }
    if(flag)  // 올바른 괄호면 문자열 그대로 반환 
    return s;
    else  // 올바른 괄호가 아니면 뒤집은 문자열 반환 
    return a;
}

string Divide(string s){  // 균형잡힌 괄호 단위로 나누는 함수 
    if(s == "")  // 빈 문자열이면 
        return "";  // 리턴 
    string a = "";  // 균형잡힌 괄호 u를 저장할 변수 
    string b = "";  // 괄호 v를 저장할 변수 
    int iCount = 0;  // 균형잡힌 괄호인지 판별할 변수 
    bool flag = true;  // 문자를 u에 저장할지 v에 저장할지 판단하는 변수 
    for(int i = 0; i < s.length(); ++i){  // 문자열을 탐색하면서 
        if(s[i] == '(')  // ( 여는 괄호이면 iCount - 1 
            --iCount;
        else if(s[i] == ')')  // ) 닫는 괄호이면 iCount + 1 
            ++iCount;
        if(flag)  // 아직 균형잡힌 괄호가 아니면 
            a += s[i];  // a에 저장 
        else
            b += s[i];  // 균형잡힌 괄호를 만든 이후엔 b에 저장 
        if(iCount == 0)  // 균형잡힌 괄를 만들었으면 
            flag = false;  // flag 변경 
    }
    string c = Count(a);  // 올바른 괄호인지 판단하고 아니라면 괄호 방향을 뒤집는 함수를 통해 문자열을 받아와서 
    if(c.length() == a.length())  // 이미 올바른 괄호였으면    
    return c + Divide(b);   
    else  // 올바른 괄호가 아니였으면 
    return '(' + Divide(b) + ')' + c; 
}


string solution(string p) {
    string answer = "";
    answer = Divide(p);
    return answer;
}
